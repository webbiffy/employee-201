{"version":3,"sources":["components/appBar.js","components/employee-profile/profile.js","components/employee-profile/bank/bank-index.js","Database.js","components/employee-profile/bank/bank-add.js","components/employee-profile/bank/bank-edit.js","App.js","serviceWorker.js","index.js"],"names":["MyAppBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","opened","menu","link","_this2","classes","toggleDrawer","isOpen","event","type","key","setState","react_default","a","createElement","className","root","AppBar","position","Toolbar","variant","IconButton","menuButton","color","aria-label","onClick","Menu_default","Typography","react_router_dom","style","textDecoration","to","SwipeableDrawer","open","onClose","onOpen","List","ListItem","button","ListItemIcon","Inbox_default","ListItemText","primary","Component","withStyles","flexGrow","marginLeft","marginRight","Profile","Fragment","appBar","BankIndex","banks","handleDeleteBankAccount","id","indexedDB","onsuccess","target","result","transaction","objectStore","delete","Number","toConsumableArray","filter","e","bankId","getAll","_this3","listStyleType","map","bank","index","label","name","accountNo","expiration","Button","bind","theme","margin","spacing","paddingRight","saveToDB","table","data","onComplete","tx","put","oncomplete","onerror","BankAdd","account_no","handleChange","defineProperty","value","handleAddBankAccountsOnClick","toBeInserted","console","log","history","push","TextField","textField","onChange","defaultValue","InputLabelProps","shrink","width","BankEdit","get","match","params","App","react_router","path","exact","component","Bank","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","onupgradeneeded","db","objectStoreNames","contains","currentTarget","indexNames","createIndex","unique","createObjectStore","keyPath","autoIncrement","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dc277b1a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport {\r\n  SwipeableDrawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginLeft: -18,\r\n    marginRight: 10\r\n  }\r\n};\r\n\r\nclass MyAppBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      opened: false,\r\n      menu: \"Employee Profile\",\r\n      link: \"/\"\r\n    };\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { opened } = this.state;\r\n\r\n    const toggleDrawer = isOpen => event => {\r\n      if (\r\n        event &&\r\n        event.type === \"keydown\" &&\r\n        (event.key === \"Tab\" || event.key === \"Shift\")\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ opened: isOpen });\r\n    };\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar variant=\"dense\">\r\n            <IconButton\r\n              className={classes.menuButton}\r\n              color=\"inherit\"\r\n              aria-label=\"Menu\"\r\n              onClick={toggleDrawer(true)}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n              <Link\r\n                style={{ textDecoration: \"none\", color: \"White\" }}\r\n                to={this.state.link}\r\n              >\r\n                {this.state.menu}\r\n              </Link>\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <SwipeableDrawer\r\n          open={opened}\r\n          onClose={toggleDrawer(false)}\r\n          onOpen={toggleDrawer(true)}\r\n        >\r\n          <List>\r\n            <ListItem button onClick={toggleDrawer(false)}>\r\n              <ListItemIcon>\r\n                <InboxIcon />\r\n              </ListItemIcon>\r\n              <Link\r\n                style={{ textDecoration: \"none\", color: \"Black\" }}\r\n                to=\"/bank\"\r\n              >\r\n                <ListItemText primary=\"Bank Account\" />\r\n              </Link>\r\n            </ListItem>\r\n          </List>\r\n        </SwipeableDrawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMyAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(MyAppBar);\r\n","import React, { Component } from \"react\";\r\nimport MyAppBar from \"../appBar\";\r\n\r\nclass Profile extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <MyAppBar />\r\n        <div className=\"container-wrapper\">Welcome to your profile!!!</div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\r\n// import BankItem from \"./components/bank/bank-item\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MyAppBar from \"../../appBar\";\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  label: {\r\n    paddingRight: 10\r\n  }\r\n});\r\n\r\nclass BankIndex extends Component {\r\n  state = {\r\n    banks: []\r\n  };\r\n\r\n  handleDeleteBankAccount = id => {\r\n    let db = indexedDB.open(\"MyData\");\r\n    db.onsuccess = event => {\r\n      let tx = event.target.result.transaction([\"bank\"], \"readwrite\");\r\n      let store = tx.objectStore(\"bank\");\r\n      let item = store.delete(Number(id));\r\n\r\n      item.onsuccess = event => {\r\n        this.setState({\r\n          banks: [...this.state.banks.filter(e => e.bankId !== id)]\r\n        });\r\n      };\r\n    };\r\n  };\r\n\r\n  componentDidMount() {\r\n    let db = indexedDB.open(\"MyData\");\r\n    db.onsuccess = event => {\r\n      let tx = event.target.result.transaction([\"bank\"], \"readonly\");\r\n      let store = tx.objectStore(\"bank\");\r\n      let allItems = store.getAll();\r\n\r\n      allItems.onsuccess = event => {\r\n        this.setState({\r\n          banks: event.target.result\r\n        });\r\n      };\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <MyAppBar />\r\n        <div className=\"container-wrapper\">\r\n          <ul style={{ listStyleType: \"none\" }}>\r\n            {this.state.banks.map((bank, index) => (\r\n              <li key={index}>\r\n                <Link\r\n                  to={\"/bank/edit/\" + bank.bankId}\r\n                  className={classes.label}\r\n                >\r\n                  {bank.name}\r\n                </Link>\r\n                <label className={classes.label}>{bank.accountNo}</label>\r\n                <label className={classes.label}>{bank.expiration}</label>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  className={classes.button}\r\n                  onClick={this.handleDeleteBankAccount.bind(this, bank.bankId)}\r\n                >\r\n                  X\r\n                </Button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <br />\r\n          <br />\r\n          <Button variant=\"outlined\" color=\"primary\" className={classes.button}>\r\n            <Link to=\"/bank/add\">ADD</Link>\r\n          </Button>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nBankIndex.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(BankIndex);\r\n","import { request } from \"http\";\r\n\r\nexport const InitializeDB = () => {\r\n  //var databaseRequest = window.indexedDB.open(\"MyData\", 1); //initial database\r\n  var databaseRequest = window.indexedDB.open(\"MyData\", 8); //created bank table\r\n\r\n  databaseRequest.onupgradeneeded = function(event) {\r\n    var db = event.target.result;\r\n\r\n    if (!db.objectStoreNames.contains(\"bank\")) {\r\n      var table = db.createObjectStore(\"bank\", {\r\n        keyPath: \"bankId\",\r\n        autoIncrement: true\r\n      });\r\n\r\n      table.createIndex(\"name\", \"name\", { unique: false });\r\n      table.createIndex(\"accountNo\", \"accountNo\", { unique: false });\r\n      table.createIndex(\"expiration\", \"expiration\", { unique: false });\r\n    } else {\r\n      var table = event.currentTarget.transaction.objectStore(\"bank\");\r\n      if (!table.indexNames.contains(\"expiration\")) {\r\n        table.createIndex(\"expiration\", \"expiration\", { unique: false });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const saveToDB = (table, data, onComplete) => {\r\n  let db = indexedDB.open(\"MyData\");\r\n  var toBeInserted = {};\r\n  db.onsuccess = event => {\r\n    let tx = event.target.result.transaction([table], \"readwrite\");\r\n    let store = tx.objectStore(table);\r\n\r\n    store.put(data);\r\n\r\n    tx.oncomplete = event => {\r\n      onComplete(event);\r\n    };\r\n\r\n    tx.onerror = event => {\r\n      return false;\r\n    };\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { saveToDB } from \"../../../Database\";\r\nimport MyAppBar from \"../../appBar\";\r\n\r\nconst styles = theme => ({\r\n  textField: {\r\n    width: 200\r\n  }\r\n});\r\n\r\nclass BankAdd extends Component {\r\n  state = {\r\n    name: \"\",\r\n    account_no: \"\",\r\n    expiration: \"\"\r\n  };\r\n\r\n  handleChange = name => event => {\r\n    this.setState({ [name]: event.target.value });\r\n  };\r\n\r\n  handleAddBankAccountsOnClick = () => {\r\n    var toBeInserted = {\r\n      name: this.state.name,\r\n      accountNo: this.state.account_no,\r\n      expiration: this.state.expiration\r\n    };\r\n\r\n    var result = saveToDB(\"bank\", toBeInserted, event => {\r\n      console.log(event);\r\n      this.props.history.push(\"/bank\");\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <MyAppBar />\r\n        <div className=\"container-wrapper\">\r\n          <h3>Add Bank Account</h3>\r\n          <TextField\r\n            id=\"bank_name\"\r\n            label=\"Bank Name\"\r\n            className={classes.textField}\r\n            value={this.state.name}\r\n            onChange={this.handleChange(\"name\")}\r\n            margin=\"normal\"\r\n          />{\" \"}\r\n          <br />\r\n          <TextField\r\n            id=\"account_no\"\r\n            label=\"Account No.\"\r\n            className={classes.textField}\r\n            value={this.state.account_no}\r\n            onChange={this.handleChange(\"account_no\")}\r\n            margin=\"normal\"\r\n          />\r\n          <br />\r\n          <TextField\r\n            id=\"account_expiration\"\r\n            label=\"Expiration\"\r\n            type=\"date\"\r\n            defaultValue={this.state.expiration}\r\n            className={classes.textField}\r\n            InputLabelProps={{\r\n              shrink: true\r\n            }}\r\n            onChange={this.handleChange(\"expiration\")}\r\n          />\r\n          <br />\r\n          <br />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={this.handleAddBankAccountsOnClick}\r\n          >\r\n            SAVE\r\n          </Button>\r\n          <Link to=\"/bank\">Back</Link>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nBankAdd.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(BankAdd);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { saveToDB } from \"../../../Database\";\r\nimport MyAppBar from \"../../appBar\";\r\n\r\nconst styles = theme => ({\r\n  textField: {\r\n    width: 200\r\n  }\r\n});\r\n\r\nclass BankEdit extends Component {\r\n  state = {\r\n    bankId: \"\",\r\n    name: \"\",\r\n    accountNo: \"\",\r\n    expiration: \"\"\r\n  };\r\n\r\n  handleChange = name => event => {\r\n    this.setState({ [name]: event.target.value });\r\n  };\r\n\r\n  handleAddBankAccountsOnClick = () => {\r\n    var toBeInserted = {\r\n      bankId: this.state.bankId,\r\n      name: this.state.name,\r\n      accountNo: this.state.account_no,\r\n      expiration: this.state.expiration\r\n    };\r\n\r\n    var result = saveToDB(\"bank\", toBeInserted, event => {\r\n      //console.log(event);\r\n      this.props.history.push(\"/bank\");\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    let db = indexedDB.open(\"MyData\");\r\n    db.onsuccess = event => {\r\n      let tx = event.target.result.transaction([\"bank\"], \"readonly\");\r\n      let store = tx.objectStore(\"bank\");\r\n      let item = store.get(Number(this.props.match.params.id));\r\n\r\n      item.onsuccess = event => {\r\n        // console.log(event.target.result);\r\n        this.setState(event.target.result);\r\n      };\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <MyAppBar />\r\n        <div className=\"container-wrapper\">\r\n          <h3>Add Bank Account</h3>\r\n          <TextField\r\n            id=\"bank_name\"\r\n            label=\"Bank Name\"\r\n            className={classes.textField}\r\n            value={this.state.name}\r\n            onChange={this.handleChange(\"name\")}\r\n            margin=\"normal\"\r\n          />\r\n          <br />\r\n          <TextField\r\n            id=\"account_no\"\r\n            label=\"Account No.\"\r\n            className={classes.textField}\r\n            value={this.state.accountNo}\r\n            onChange={this.handleChange(\"accountNo\")}\r\n            margin=\"normal\"\r\n          />\r\n          <br />\r\n          <TextField\r\n            id=\"account_expiration\"\r\n            label=\"Expiration\"\r\n            type=\"date\"\r\n            value={this.state.expiration}\r\n            className={classes.textField}\r\n            InputLabelProps={{\r\n              shrink: true\r\n            }}\r\n            onChange={this.handleChange(\"expiration\")}\r\n          />\r\n          <br />\r\n          <br />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={this.handleAddBankAccountsOnClick}\r\n          >\r\n            SAVE\r\n          </Button>\r\n          <Link style={{ marginLeft: 10 }} to=\"/bank\">\r\n            Back\r\n          </Link>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nBankEdit.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(BankEdit);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"typeface-roboto\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Profile from \"./components/employee-profile/profile\";\nimport Bank from \"./components/employee-profile/bank/bank-index\";\nimport BankAdd from \"./components/employee-profile/bank/bank-add\";\nimport BankEdit from \"./components/employee-profile/bank/bank-edit\";\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Profile} />\n      <Route path=\"/bank\" exact component={Bank} />\n      <Route path=\"/bank/add\" exact component={BankAdd} />\n      <Route path=\"/bank/edit/:id\" exact component={BankEdit} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { InitializeDB } from \"./Database\";\n\nInitializeDB();\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}